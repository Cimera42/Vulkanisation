#include "vulkanDefinitions.h"

//Pointer to function, loaded from DLL by GLFW
    DECLARE_FUNCTION(vkCreateInstance);
    DECLARE_FUNCTION(vkDestroyInstance);
    DECLARE_FUNCTION(vkEnumeratePhysicalDevices);
    DECLARE_FUNCTION(vkGetPhysicalDeviceProperties);
    DECLARE_FUNCTION(vkCreateDevice);
    DECLARE_FUNCTION(vkDestroyDevice);
    DECLARE_FUNCTION(vkGetPhysicalDeviceQueueFamilyProperties);
    DECLARE_FUNCTION(vkDestroySurfaceKHR);
    DECLARE_FUNCTION(vkGetPhysicalDeviceSurfaceSupportKHR);
    DECLARE_FUNCTION(vkGetPhysicalDeviceSurfaceFormatsKHR);
    DECLARE_FUNCTION(vkGetPhysicalDeviceSurfaceCapabilitiesKHR);
    DECLARE_FUNCTION(vkGetPhysicalDeviceSurfacePresentModesKHR);
    DECLARE_FUNCTION(vkCreateSwapchainKHR);
    DECLARE_FUNCTION(vkDestroySwapchainKHR);
    DECLARE_FUNCTION(vkGetSwapchainImagesKHR);
    DECLARE_FUNCTION(vkCmdPipelineBarrier);
    DECLARE_FUNCTION(vkCreateImageView);
    DECLARE_FUNCTION(vkDestroyImageView);
    DECLARE_FUNCTION(vkCreateFramebuffer);
    DECLARE_FUNCTION(vkDestroyFramebuffer);
    DECLARE_FUNCTION(vkAcquireNextImageKHR);
    DECLARE_FUNCTION(vkQueuePresentKHR);
    DECLARE_FUNCTION(vkCreateCommandPool);
    DECLARE_FUNCTION(vkDestroyCommandPool);
    DECLARE_FUNCTION(vkAllocateCommandBuffers);
    DECLARE_FUNCTION(vkFreeCommandBuffers);
    DECLARE_FUNCTION(vkBeginCommandBuffer);
    DECLARE_FUNCTION(vkEndCommandBuffer);
    DECLARE_FUNCTION(vkQueueSubmit);
    DECLARE_FUNCTION(vkCreateFence);
    DECLARE_FUNCTION(vkDestroyFence);
    DECLARE_FUNCTION(vkGetDeviceQueue);
    DECLARE_FUNCTION(vkWaitForFences);
    DECLARE_FUNCTION(vkResetFences);
    DECLARE_FUNCTION(vkResetCommandBuffer);
    DECLARE_FUNCTION(vkGetPhysicalDeviceMemoryProperties);
    DECLARE_FUNCTION(vkCreateImage);
    DECLARE_FUNCTION(vkDestroyImage);
    DECLARE_FUNCTION(vkGetImageMemoryRequirements);
    DECLARE_FUNCTION(vkAllocateMemory);
    DECLARE_FUNCTION(vkBindImageMemory);
    DECLARE_FUNCTION(vkCreateRenderPass);
    DECLARE_FUNCTION(vkDestroyRenderPass);
    DECLARE_FUNCTION(vkCreateBuffer);
    DECLARE_FUNCTION(vkDestroyBuffer);
    DECLARE_FUNCTION(vkGetBufferMemoryRequirements);
    DECLARE_FUNCTION(vkMapMemory);
    DECLARE_FUNCTION(vkUnmapMemory);
    DECLARE_FUNCTION(vkBindBufferMemory);
    DECLARE_FUNCTION(vkCreateShaderModule);
    DECLARE_FUNCTION(vkDestroyShaderModule);
    DECLARE_FUNCTION(vkCreatePipelineLayout);
    DECLARE_FUNCTION(vkDestroyPipelineLayout);
    DECLARE_FUNCTION(vkCreateGraphicsPipelines);
    DECLARE_FUNCTION(vkDestroyPipeline);
    DECLARE_FUNCTION(vkCreateSemaphore);
    DECLARE_FUNCTION(vkCmdBeginRenderPass);
    DECLARE_FUNCTION(vkCmdBindPipeline);
    DECLARE_FUNCTION(vkCmdSetViewport);
    DECLARE_FUNCTION(vkCmdSetScissor);
    DECLARE_FUNCTION(vkCmdBindVertexBuffers);
    DECLARE_FUNCTION(vkCmdBindIndexBuffer);
    DECLARE_FUNCTION(vkCmdDraw);
    DECLARE_FUNCTION(vkCmdDrawIndexed);
    DECLARE_FUNCTION(vkCmdEndRenderPass);
    DECLARE_FUNCTION(vkDestroySemaphore);
    DECLARE_FUNCTION(vkEnumerateInstanceLayerProperties);
    DECLARE_FUNCTION(vkEnumerateInstanceExtensionProperties);
    DECLARE_FUNCTION(vkEnumerateDeviceLayerProperties);
    DECLARE_FUNCTION(vkEnumerateDeviceExtensionProperties);
    DECLARE_FUNCTION(vkFreeMemory);
    DECLARE_FUNCTION(vkCmdBindDescriptorSets);
    DECLARE_FUNCTION(vkCreateDescriptorSetLayout);
    DECLARE_FUNCTION(vkCreateDescriptorPool);
    DECLARE_FUNCTION(vkAllocateDescriptorSets);
    DECLARE_FUNCTION(vkUpdateDescriptorSets);
    DECLARE_FUNCTION(vkDestroyDescriptorSetLayout);
    DECLARE_FUNCTION(vkDestroyDescriptorPool);
    DECLARE_FUNCTION(vkGetPhysicalDeviceFormatProperties);
    DECLARE_FUNCTION(vkGetImageSubresourceLayout);
    DECLARE_FUNCTION(vkCreateSampler);
    DECLARE_FUNCTION(vkQueueWaitIdle);
    DECLARE_FUNCTION(vkFlushMappedMemoryRanges);
    DECLARE_FUNCTION(vkDestroySampler);
    DECLARE_FUNCTION(vkCmdPushConstants);
    DECLARE_FUNCTION(vkCmdCopyBufferToImage);
    DECLARE_FUNCTION(vkDeviceWaitIdle);
    DECLARE_FUNCTION(vkGetPhysicalDeviceFeatures);

void loadFunctions()
{
    LOAD_FUNCTION(vkCreateInstance);
    LOAD_FUNCTION(vkDestroyInstance);
    LOAD_FUNCTION(vkEnumeratePhysicalDevices);
    LOAD_FUNCTION(vkGetPhysicalDeviceProperties);
    LOAD_FUNCTION(vkCreateDevice);
    LOAD_FUNCTION(vkDestroyDevice);
    LOAD_FUNCTION(vkGetPhysicalDeviceQueueFamilyProperties);
    LOAD_FUNCTION(vkDestroySurfaceKHR);
    LOAD_FUNCTION(vkGetPhysicalDeviceSurfaceSupportKHR);
    LOAD_FUNCTION(vkGetPhysicalDeviceSurfaceFormatsKHR);
    LOAD_FUNCTION(vkGetPhysicalDeviceSurfaceCapabilitiesKHR);
    LOAD_FUNCTION(vkGetPhysicalDeviceSurfacePresentModesKHR);
    LOAD_FUNCTION(vkCreateSwapchainKHR);
    LOAD_FUNCTION(vkDestroySwapchainKHR);
    LOAD_FUNCTION(vkGetSwapchainImagesKHR);
    LOAD_FUNCTION(vkCmdPipelineBarrier);
    LOAD_FUNCTION(vkCreateImageView);
    LOAD_FUNCTION(vkDestroyImageView);
    LOAD_FUNCTION(vkCreateFramebuffer);
    LOAD_FUNCTION(vkDestroyFramebuffer);
    LOAD_FUNCTION(vkAcquireNextImageKHR);
    LOAD_FUNCTION(vkQueuePresentKHR);
    LOAD_FUNCTION(vkCreateCommandPool);
    LOAD_FUNCTION(vkDestroyCommandPool);
    LOAD_FUNCTION(vkAllocateCommandBuffers);
    LOAD_FUNCTION(vkFreeCommandBuffers);
    LOAD_FUNCTION(vkBeginCommandBuffer);
    LOAD_FUNCTION(vkEndCommandBuffer);
    LOAD_FUNCTION(vkQueueSubmit);
    LOAD_FUNCTION(vkCreateFence);
    LOAD_FUNCTION(vkDestroyFence);
    LOAD_FUNCTION(vkGetDeviceQueue);
    LOAD_FUNCTION(vkWaitForFences);
    LOAD_FUNCTION(vkResetFences);
    LOAD_FUNCTION(vkResetCommandBuffer);
    LOAD_FUNCTION(vkGetPhysicalDeviceMemoryProperties);
    LOAD_FUNCTION(vkCreateImage);
    LOAD_FUNCTION(vkDestroyImage);
    LOAD_FUNCTION(vkGetImageMemoryRequirements);
    LOAD_FUNCTION(vkAllocateMemory);
    LOAD_FUNCTION(vkBindImageMemory);
    LOAD_FUNCTION(vkCreateRenderPass);
    LOAD_FUNCTION(vkDestroyRenderPass);
    LOAD_FUNCTION(vkCreateBuffer);
    LOAD_FUNCTION(vkDestroyBuffer);
    LOAD_FUNCTION(vkGetBufferMemoryRequirements);
    LOAD_FUNCTION(vkMapMemory);
    LOAD_FUNCTION(vkUnmapMemory);
    LOAD_FUNCTION(vkBindBufferMemory);
    LOAD_FUNCTION(vkCreateShaderModule);
    LOAD_FUNCTION(vkDestroyShaderModule);
    LOAD_FUNCTION(vkCreatePipelineLayout);
    LOAD_FUNCTION(vkDestroyPipelineLayout);
    LOAD_FUNCTION(vkCreateGraphicsPipelines);
    LOAD_FUNCTION(vkDestroyPipeline);
    LOAD_FUNCTION(vkCreateSemaphore);
    LOAD_FUNCTION(vkCmdBeginRenderPass);
    LOAD_FUNCTION(vkCmdBindPipeline);
    LOAD_FUNCTION(vkCmdSetViewport);
    LOAD_FUNCTION(vkCmdSetScissor);
    LOAD_FUNCTION(vkCmdBindVertexBuffers);
    LOAD_FUNCTION(vkCmdBindIndexBuffer);
    LOAD_FUNCTION(vkCmdDraw);
    LOAD_FUNCTION(vkCmdDrawIndexed);
    LOAD_FUNCTION(vkCmdEndRenderPass);
    LOAD_FUNCTION(vkDestroySemaphore);
    LOAD_FUNCTION(vkEnumerateInstanceLayerProperties);
    LOAD_FUNCTION(vkEnumerateInstanceExtensionProperties);
    LOAD_FUNCTION(vkEnumerateDeviceLayerProperties);
    LOAD_FUNCTION(vkEnumerateDeviceExtensionProperties);
    LOAD_FUNCTION(vkFreeMemory);
    LOAD_FUNCTION(vkCmdBindDescriptorSets);
    LOAD_FUNCTION(vkCreateDescriptorSetLayout);
    LOAD_FUNCTION(vkCreateDescriptorPool);
    LOAD_FUNCTION(vkAllocateDescriptorSets);
    LOAD_FUNCTION(vkUpdateDescriptorSets);
    LOAD_FUNCTION(vkDestroyDescriptorSetLayout);
    LOAD_FUNCTION(vkDestroyDescriptorPool);
    LOAD_FUNCTION(vkGetPhysicalDeviceFormatProperties);
    LOAD_FUNCTION(vkGetImageSubresourceLayout);
    LOAD_FUNCTION(vkCreateSampler);
    LOAD_FUNCTION(vkQueueWaitIdle);
    LOAD_FUNCTION(vkFlushMappedMemoryRanges);
    LOAD_FUNCTION(vkDestroySampler);
    LOAD_FUNCTION(vkCmdPushConstants);
    LOAD_FUNCTION(vkCmdCopyBufferToImage);
    LOAD_FUNCTION(vkDeviceWaitIdle);
    LOAD_FUNCTION(vkGetPhysicalDeviceFeatures);
}
